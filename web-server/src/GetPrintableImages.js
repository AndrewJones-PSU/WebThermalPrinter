// This is the main function for taking files from the client and generating images that can be sent to the printer.
//
// The input will be the array of files (req.files as generated by multer)
// The output will be the array of image files that can be sent to the printer.

const FileValidation = require("./FileValidation.js");
const ImageProcessing = require("./ImageProcessing.js");
const textToImage = require("./TextToImage.js");

async function getPrintableImages(files) {
	if (!files) {
		return Promise.reject("No files provided");
	}
	// First, validate all files. If a file is not valid, replace it with a template error txt file.
	let validFiles = FileValidation.validateFiles(files);
	if (validFiles instanceof Error) {
		return Promise.reject(validFiles);
	}

	// Next, go through all files and convert them to printable images based on their mime type.
	let mapping = validFiles.map(fileToJimp);
	return Promise.all(mapping).then((images) => {
		// After all files are converted, export out of jimp to PNGs
		let exportMapping = images.map(ImageProcessing.splitAndExport);

		return Promise.all(exportMapping).then((buffers) => {
			// After all images are exported, append a cut command to the end of the array, then return
			// Cutting this out since we're changing the spooler to automatically cut after each set of images
			// buffers.push("CUT");
			return buffers;
		});
	});
}

// Takes a file and returns a promise that resolves to a Jimp image
// This function parses the type, and calls the corresponding function
// This function assumes the file is validated already
async function fileToJimp(file) {
	// Get the file type
	let type = file.mimetype;

	// Call the corresponding function
	if (type == "image/png" || type == "image/jpeg") {
		return ImageProcessing.formatImage(file.buffer);
	} else if (type == "text/plain" || (type == "application/octet-stream" && file.originalname.endsWith(".md"))) {
		return textToImage.textToImage(file.buffer);
	}
}

module.exports = getPrintableImages;
